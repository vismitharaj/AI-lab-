from itertools import product
import re

# Evaluate propositional expression in a given model
def pl_true(expr, model):
    # Handle biconditional first: (A <=> B) → (A == B)
    expr = re.sub(r'([A-Za-z_]+)\s*<=>\s*([A-Za-z_]+)', r'(\1 == \2)', expr)

    # Handle implication: (A => B) → (not A or B)
    expr = re.sub(r'([A-Za-z_]+)\s*=>\s*([A-Za-z_]+)', r'(not \1 or \2)', expr)

    # Replace each symbol with its Boolean value (True/False)
    for sym, val in model.items():
        expr = re.sub(rf'\b{sym}\b', str(val), expr)

    # Clean up logical operators to ensure Python syntax
    expr = expr.replace("and", " and ").replace("or", " or ").replace("not", " not ")

    # Evaluate the expression under the current model
    try:
        return eval(expr)
    except Exception as e:
        print(f"Error evaluating expression: {expr}")
        raise e

# Extract all unique propositional symbols (excluding logical operators)
def extract_symbols(kb, query):
    text = " ".join(kb + [query])
    symbols = set(re.findall(r"[A-Za-z_]+", text))
    symbols -= {"and", "or", "not"}  # Remove keywords
    return sorted(symbols)

# Truth-table entailment algorithm
def tt_entails(kb, query):
    symbols = extract_symbols(kb, query)
    print("\nSymbols:", symbols)

    print("\nTruth Table:")
    print(" | ".join(symbols + ["KB", "Query"]))
    print("-" * 75)

    entails = True
    for values in product([False, True], repeat=len(symbols)):
        model = dict(zip(symbols, values))
        kb_value = all(pl_true(sentence, model) for sentence in kb)
        query_value = pl_true(query, model)

        print(" | ".join(str(model[s]) for s in symbols), "|", kb_value, "|", query_value)

        # If KB is true and Query is false, entailment fails
        if kb_value and not query_value:
            entails = False

    print("\nDoes KB entail Query? =>", "YES ✅" if entails else "NO ❌")

# -------------------- Main Program --------------------
if __name__ == "__main__":
    print("Enter the Knowledge Base sentences (type 'done' when finished):")
    kb = []
    while True:
        sentence = input("> ").strip()
        if sentence.lower() == "done":
            break
        if sentence:
            kb.append(sentence)

    query = input("\nEnter the Query sentence: ").strip()

    tt_entails(kb, query)

OUTPUT:
Enter the Knowledge Base sentences (type 'done' when finished):
> A=>B
> B=>C
> done

Enter the Query sentence: C

Symbols: ['A', 'B', 'C']

Truth Table:
A | B | C | KB | Query
---------------------------------------------------------------------------
False | False | False | True | False
False | False | True | True | True
False | True | False | False | False
False | True | True | True | True
True | False | False | False | False
True | False | True | False | True
True | True | False | False | False
True | True | True | True | True

Does KB entail Query? => NO ❌
